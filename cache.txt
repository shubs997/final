
CRT
import java.math.BigInteger;
import java.util.Scanner;

public class ChineseRemainderTheorem {

	public static void main(String[] args) {
		int i, inputcount, X = 0, M = 1;
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter number of equations :");
		inputcount = sc.nextInt();

		int[] a = new int[10];
		int[] m = new int[10];
		int[] y = new int[10];

		for (i = 0; i < inputcount; i++) {
			System.out.println("\nFor equation " + (i + 1) + ", a mod m :");
			System.out.println("Enter value of a :");
			a[i] = sc.nextInt();
			System.out.println("Enter value of m :");
			m[i] = sc.nextInt();
		}

		for (i = 0; i < inputcount; i++) {
			M *= m[i];
		}

		System.out.println("Value of M = " + M);

		for (i = 0; i < inputcount; i++) {
			y[i] = BigInteger.valueOf(M / m[i]).modInverse(BigInteger.valueOf(m[i])).intValue();
		}

		for (i = 0; i < inputcount; i++) {
			X += (a[i] * (M / m[i]) * y[i]);
		}

		System.out.println("Value of X = " + X % M);
	}

}






RSA



import java.math.BigInteger;
import java.util.Random;
import java.util.Scanner;

public class RSA {
    public static int bitlength = 512;
    public static Random r = new Random();
    public static BigInteger p = BigInteger.probablePrime(bitlength, r);
    public static BigInteger q = BigInteger.probablePrime(bitlength, r);
    public static BigInteger n = p.multiply(q);
    public static BigInteger phi = (p.subtract(BigInteger.ONE)).multiply(q.subtract(BigInteger.ONE));
    public static BigInteger d;
    public static BigInteger e = BigInteger.probablePrime(bitlength / 2, r);

    public static void main(String args[]) {
        // While gcd(phi,e) > 1 and e < phi
        while (phi.gcd(e).compareTo(BigInteger.ONE) > 0 && e.compareTo(phi) < 0) {
            e.add(BigInteger.ONE);
        }

        d = e.modInverse(phi);
        System.out.println("Public key : " + e);
        System.out.println("Private key : " + d);
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter plaintext :");
        String plaintext = sc.nextLine();
        sc.close();
        System.out.println("\nPlaintext : " + plaintext);
	System.out.println("\nPlaintext in bytes : " + bytestoString(plaintext.getBytes()));
        byte encrypted[] = encrypt(plaintext.getBytes()); 
        System.out.println("\nCiphertext in bytes : " + bytestoString(encrypted));
        byte decrypted[] = decrypt(encrypted);
        System.out.println("\nPlaintext after decrypting : " + new String(decrypted));
    }

    private static String bytestoString(byte[] encrypted) {
        StringBuilder ciphertext = new StringBuilder();
        for (byte b : encrypted) {
            ciphertext.append(Byte.toString(b));
        }
        return ciphertext.toString();
    }

    private static byte[] encrypt(byte[] message) {
        return (new BigInteger(message)).modPow(e, n).toByteArray();
    }

    private static byte[] decrypt(byte[] message) {
        return (new BigInteger(message)).modPow(d, n).toByteArray();
    }

}







SHA1


import java.util.Scanner;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class sha1 {
    public static void main(String args[]) throws NoSuchAlgorithmException {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter string to be encrypted :");
        String input = scanner.nextLine();
        System.out.println("Input :" + input);
        System.out.println("Output : " + encrypt(input));
        scanner.close();
    }

    private static String encrypt(String input) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-1");
            byte[] message = md.digest(input.getBytes());
            BigInteger n = new BigInteger(1, message);
            String hash = n.toString(16);
            return hash;
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
    }
}






ML

SVM

from sklearn import datasets
from sklearn.metrics import accuracy_score 
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
import matplotlib.pyplot as plt

wine = datasets.load_wine()
x = wine.data[:, :]
y = wine.target
y
wine.feature_names

x_train, x_test, y_train, y_test = train_test_split(x, y, random_state = 0, test_size = 0.34)

classifier = SVC(kernel = "linear", C = 1).fit(x_train, y_train)

classifier_predictions = classifier.predict(x_test)
classifier_predictions

print(accuracy_score(y_test, classifier_predictions)*100)

clf = SVC(kernel='linear', C=1).fit(x_train, y_train)
scores = cross_val_score(clf, wine.data, wine.target, cv=5)
scores = scores.mean()
scores

plt.scatter(x[:,0], y, c = y)

plt.scatter(x[:,1], y, c = y)





K-MEans

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import copy
from sklearn import datasets

iris = datasets.load_iris()
iris.target

df = pd.DataFrame({
    'x': iris.data[:,0],
    'y': iris.data[:,1],
    'cluster' : iris.target
})
df

centroids = {}
for i in range(3):
    result_list = []
    result_list.append(df.loc[df['cluster'] == i]['x'].mean())
    result_list.append(df.loc[df['cluster'] == i]['y'].mean())
    
    centroids[i] = result_list

centroids

fig = plt.figure(figsize=(5, 5))
plt.scatter(df['x'], df['y'], c=iris.target,cmap='gist_rainbow')
plt.xlabel('Sepal Length', fontsize=18)
plt.ylabel('Sepal Width', fontsize=18)

colmap = {0: 'r', 1: 'g', 2: 'b'}
for i in centroids.keys():
    plt.scatter(centroids[i][0],centroids[i][1], color=colmap[i])
plt.xlim(4.5, 8)
plt.ylim(2, 4.5)
plt.show()

plt.scatter(df['x'], df['y'], c=iris.target,alpha = 0.3)
colmap = {0: 'r', 1: 'g', 2: 'b'}
for i in centroids.keys():
    plt.scatter(centroids[i][0],centroids[i][1], c=colmap[i], edgecolor='k')
plt.show()

def assignment(df, centroids):
    for i in centroids.keys():
        # sqrt((x1 - x2)^2 - (y1 - y2)^2)
        df['distance_from_{}'.format(i)] = (
            np.sqrt(
                (df['x'] - centroids[i][0]) ** 2
                + (df['y'] - centroids[i][1]) ** 2
            )
        )
    centroid_distance_cols = ['distance_from_{}'.format(i) for i in centroids.keys()]
    df['closest'] = df.loc[:, centroid_distance_cols].idxmin(axis=1)
    df['closest'] = df['closest'].map(lambda x: int(x.lstrip('distance_from_')))
    df['color'] = df['closest'].map(lambda x: colmap[x])
    return df

df = assignment(df, centroids)
df

fig = plt.figure(figsize=(5, 5))
plt.scatter(df['x'], df['y'], color=df['color'], alpha=0.3)
for i in centroids.keys():
    plt.scatter(*centroids[i], color=colmap[i], edgecolor='k')

plt.show()

def update(k):
    for i in centroids.keys():
        centroids[i][0] = np.mean(df[df['closest'] == i]['x'])
        centroids[i][1] = np.mean(df[df['closest'] == i]['y'])
    return k

while True:
    closest_centroids = df['closest'].copy(deep=True)
    centroids = update(centroids)
    df = assignment(df, centroids)
    if closest_centroids.equals(df['closest']):
        break

fig = plt.figure(figsize=(5, 5))
plt.scatter(df['x'], df['y'], color=df['color'])
for i in centroids.keys():
    plt.scatter(centroids[i][0],centroids[i][1], color=colmap[i], edgecolor='k')

plt.show()



ANN


from keras.models import Sequential
from keras.layers import Dense
import keras
from ann_visualizer.visualize import ann_viz
from sklearn.model_selection import train_test_split
from sklearn import datasets

wine = datasets.load_wine()
x = wine.data
y = wine.target
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)
y_train = keras.utils.to_categorical(y_train, 3)
y_test = keras.utils.to_categorical(y_test, 3)

model = Sequential()
model.add(Dense(10, input_dim = 13, activation = 'relu'))
model.add(Dense(8, activation = 'relu'))
model.add(Dense(3, activation = 'softmax'))

model.compile(loss = 'categorical_crossentropy', optimizer = 'adam', metrics = ['accuracy'])

model.fit(x_train, y_train, epochs = 150, batch_size = 10, validation_data = (x_train,y_train))

accuracy = model.evaluate(x_test, y_test)
print(accuracy[1]*100)

ann_viz(model, title = "ANN")




MBA



library(arules)
library(arulesViz)

data("Groceries")

str(Groceries)

summary(Groceries)

rules <- apriori(Groceries)

rules <- apriori(Groceries,parameter = list(supp=0.001,conf=0.8))

inspect(rules[1:10])

rules <- sort(rules,by="support",decreasing = T)

inspect(rules[1:10])

rules

redundant_rules <- is.redundant(rules)
redundant_rules

summary(redundant_rules)

rules <- rules[!redundant_rules]

rules

rules_milk <- apriori(Groceries,parameter = list(supp=0.001,conf=0.8),appearance = list(default="lhs",rhs="whole milk"))

inspect(rules_milk[1:10])

plot(rules,method = "graph")

plot(rules,method = "graph",interactive = T)




PCA 




library(gclus)

data(wine)

View(wine)

names(wine)

summary(wine)

cor(wine)

pcal <- princomp(wine,scores = TRUE,cor = TRUE)

summary(wine)

plot(pcal)

plot(pcal,type='l')

biplot(pcal)

names(pcal)

pcal$loadings

pcal$scores

pcal$sdev


